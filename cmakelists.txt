cmake_minimum_required(VERSION 3.28)
project(verdigris VERSION 0.0.0.1)

include(FetchContent)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# https://bugs.llvm.org/show_bug.cgi?id=47950

# Libraries

FetchContent_Declare(fmt
    GIT_REPOSITORY https://github.com/fmtlib/fmt.git
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(fmt)

FetchContent_Declare(concurrentqueue
    GIT_REPOSITORY https://github.com/cameron314/concurrentqueue
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(concurrentqueue)

FetchContent_Declare(glfw
    GIT_REPOSITORY https://github.com/glfw/glfw
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(glfw)

FetchContent_Declare(gcem
    GIT_REPOSITORY https://github.com/kthohr/gcem
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(gcem)


FetchContent_Declare(tinyobjloader
    GIT_REPOSITORY https://github.com/tinyobjloader/tinyobjloader
    GIT_TAG release
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(tinyobjloader)

FetchContent_Declare(glm
    GIT_REPOSITORY https://github.com/g-truc/glm
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(glm)
target_compile_definitions(glm INTERFACE GLM_FORCE_DEPTH_ZERO_TO_ONE=1)
target_compile_definitions(glm INTERFACE GLM_FORCE_RADIANS=1)
target_compile_definitions(glm INTERFACE GLM_FORCE_SIZE_T_LENGTH=1)


FetchContent_Declare(magic_enum
    GIT_REPOSITORY https://github.com/Neargye/magic_enum
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(magic_enum)


find_package(Vulkan REQUIRED)



# Vulkan memory Allocator
execute_process(
    COMMAND git submodule update --init --recursive -- inc/VulkanMemoryAllocator
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMAND_ERROR_IS_FATAL ANY
)
add_library(VulkanMemoryAllocator INTERFACE)
target_include_directories(VulkanMemoryAllocator SYSTEM INTERFACE 
    ${CMAKE_SOURCE_DIR}/inc/VulkanMemoryAllocator/include
)

# imgui
execute_process(
    COMMAND git submodule update --init --recursive -- inc/imgui
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMAND_ERROR_IS_FATAL ANY
)
add_library(imgui STATIC)
target_sources(imgui PUBLIC 
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/imgui.cpp

    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/imgui_demo.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/imgui_draw.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/imgui_widgets.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/imgui_tables.cpp

    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/backends/imgui_impl_vulkan.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/backends/imgui_impl_glfw.cpp
)
target_include_directories(imgui PUBLIC SYSTEM
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/imgui/backends
    ${CMAKE_SOURCE_DIR}/inc/imgui/include
)
target_include_directories(imgui PRIVATE SYSTEM
    ${Vulkan_INCLUDE_DIRS}
)
target_link_libraries(imgui PRIVATE glfw)
target_compile_definitions(imgui INTERFACE IMGUI_IMPL_VULKAN_NO_PROTOTYPES=0)



set(Boost_USE_STATIC_LIBS ON) 
set(Boost_USE_MULTITHREADED ON)  
set(Boost_USE_STATIC_RUNTIME ON) 
set(BOOST_ENABLE_CMAKE ON)
set(BOOST_INCLUDE_LIBRARIES container unordered)

message("Downloading boost, this will take some time!")
FetchContent_Declare(
  Boost
  GIT_REPOSITORY https://github.com/boostorg/boost.git
  GIT_TAG boost-1.84.0
  GIT_SHALLOW TRUE
  SYSTEM
)
FetchContent_MakeAvailable(Boost)



# Executable
set(VERDIGRIS_SOURCES
    src/main.cpp

    src/engine/settings.cpp

    src/game/entity/cube.cpp
    src/game/entity/disk_entity.cpp
    src/game/entity/entity.cpp

    src/game/world/sparse_volume.cpp
    src/game/world/world.cpp
    src/game/world/chunk.cpp

    src/game/game.cpp
    src/game/player.cpp


    src/gfx/vulkan/voxel/bricked_volume.cpp
    src/gfx/vulkan/voxel/compute_renderer.cpp
    src/gfx/vulkan/voxel/voxel.cpp

    src/gfx/vulkan/allocator.cpp
    src/gfx/vulkan/buffer.cpp
    src/gfx/vulkan/descriptors.cpp
    src/gfx/vulkan/device.cpp
    src/gfx/vulkan/pipelines.cpp
    src/gfx/vulkan/image.cpp
    src/gfx/vulkan/instance.cpp
    src/gfx/vulkan/render_pass.cpp
    src/gfx/vulkan/swapchain.cpp

    src/gfx/camera.cpp
    src/gfx/imgui_menu.cpp
    src/gfx/object.cpp
    src/gfx/renderer.cpp
    src/gfx/transform.cpp
    src/gfx/window.cpp
    
    src/util/block_allocator.cpp
    src/util/log.cpp
    src/util/misc.cpp
    src/util/uuid.cpp
)

add_executable(verdigris ${VERDIGRIS_SOURCES})

target_link_libraries(verdigris PUBLIC
    fmt$<$<CONFIG:Debug>:d> concurrentqueue glfw
    gcem VulkanMemoryAllocator imgui magic_enum
    glm tinyobjloader Boost::container Boost::unordered 
    # ${Boost_STACKTRACE_BASIC_LIBRARY}
    # ${Boost_STACKTRACE_BACKTRACE_LIBRARY}
    # ${Boost_STACKTRACE_ADDR2LINE_LIBRARY}
    # ${Boost_STACKTRACE_NOOP_LIBRARY}
    # dl
)

# set_target_properties(verdigris PROPERTIES UNITY_BUILD ON UNITY_BUILD_MODE BATCH UNITY_BUILD_BATCH_SIZE -1)
target_include_directories(verdigris PUBLIC ${CMAKE_SOURCE_DIR}/src)
target_include_directories(verdigris SYSTEM PUBLIC
    ${Vulkan_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS} ${fmt_SOURCE_DIR}/include)
target_link_directories(verdigris PRIVATE ${FMT_BINARY_DIR})

#     get_cmake_property(_variableNames VARIABLES)
# list (SORT _variableNames)
# foreach (_variableName ${_variableNames})
#     message(STATUS "${_variableName}=${${_variableName}}")
# endforeach()

# Compile definitions

target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_MINOR=${PROJECT_VERSION_MINOR})
target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_PATCH=${PROJECT_VERSION_PATCH})
target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_TWEAK=${PROJECT_VERSION_TWEAK})

target_compile_definitions(verdigris PUBLIC VULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)
target_compile_definitions(verdigris PUBLIC VULKAN_HPP_NO_CONSTRUCTORS=1)
# target_compile_definitions(verdigris PUBLIC VK_NO_PROTOTYPES=1)
target_compile_definitions(verdigris PUBLIC IMGUI_DEFINE_MATH_OPERATORS=1)




if (NOT (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo"))
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
    target_compile_options(verdigris PUBLIC -Ofast)
    set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded)
else()
    set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreadedDebug)
endif()




# Compiler flags TODO: prettify

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    if (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
        # Clang
        target_compile_options(verdigris PUBLIC -march=native)
        target_compile_options(verdigris PUBLIC -fvisibility=default)

        if (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
            # Add debug symbols that lldb can actually read
            target_compile_options(verdigris PUBLIC -glldb)
            target_compile_options(verdigris PUBLIC -gdwarf-4)
            target_compile_options(verdigris PUBLIC -g3)
            # target_compile_options(verdigris PUBLIC -fcoverage-mapping)
            # target_compile_options(verdigris PUBLIC -fprofile-instr-generate)
            
            # target_link_options(verdigris PUBLIC -fprofile-instr-generate)
        else()
            if (WIN32) # release only!
            endif()
        endif ()

        
        # not happy that these leak, but there nothing we can really do...
        target_compile_options(VulkanMemoryAllocator INTERFACE -Wno-nullability-extension)
        target_compile_options(VulkanMemoryAllocator INTERFACE -Wno-documentation-deprecated-sync)
        target_compile_options(imgui INTERFACE -Wno-old-style-cast)

        target_compile_options(imgui PUBLIC
            # -Wno-everything
            -Wno-reserved-identifier
            -Wno-sign-conversion
            -Wno-cast-function-type-strict
            -Wno-implicit-int-float-conversion
            -Wno-double-promotion
        )

        get_target_property(boost_container_org Boost::container ALIASED_TARGET)
        target_compile_options(${boost_container_org} PRIVATE -Wno-incompatible-pointer-types)

        # get_target_property(boost_unordered_org Boost::unordered ALIASED_TARGET)
        # target_compile_options(${boost_unordered_org} INTERFACE -Wno-incompatible-pointer-types)


        target_compile_options(verdigris PUBLIC 
            -Weverything
            -Wno-c++98-compat
            -Wno-c++98-compat-pedantic
            -Wno-missing-prototypes
            -Wno-pre-c++20-compat
            -Wno-braced-scalar-init
            -Wno-c++20-compat
            -Wno-padded
            -Wno-unsafe-buffer-usage
            -Wno-ctad-maybe-unsupported
            -Wno-gnu-anonymous-struct
            -Wno-poison-system-directories
        )

    else ()
        # Clang-cl
        message(FATAL_ERROR "Clang-cl support has not been added")
    endif ()

elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(verdigris PUBLIC -march=native)
    target_compile_options(verdigris PUBLIC -fvisibility=default)

    target_compile_options(verdigris PUBLIC -Wno-stringop-overflow)

    # if (NOT WIN32)
    #   target_compile_options(verdigris PUBLIC -fsanitize=address)
    #   target_link_options(verdigris  PUBLIC -fsanitize=address)
    # endif()

elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    message(FATAL_ERROR "MSVC support has not been added")
else ()
    message(FATAL_ERROR "Unknown and Unsupported compiler")
endif ()



find_package(Vulkan COMPONENTS glslc)
find_program(glslc_executable NAMES glslc HINTS Vulkan::glslc)
if (APPLE)
    target_link_libraries(verdigris PUBLIC "-framework Cocoa -framework IOKit")
endif ()

function(compile_shader target)
    cmake_parse_arguments(PARSE_ARGV 1 arg "" "ENV;FORMAT;INCLUDE_DIRS" "SOURCES")
    foreach (source ${arg_SOURCES})
        add_custom_command(
                OUTPUT ${source}.${arg_FORMAT}
                DEPENDS ${source}
                DEPFILE ${source}.d
                COMMAND
                ${glslc_executable}
                $<$<BOOL:${arg_ENV}>:--target-env=${arg_ENV}>
                $<$<BOOL:${arg_SPV}>:--target-spv=${arg_SPV}>
                $<$<BOOL:${arg_FORMAT}>:-mfmt=${arg_FORMAT}>
                $<$<BOOL:${arg_INCLUDE_DIRS}>:-I${CMAKE_SOURCE_DIR}/src/gfx/vulkan/shaders/include>
                -O # enable opts
                -MD -MF ${source}.d
                -o ${source}.${arg_FORMAT}
                ${CMAKE_CURRENT_SOURCE_DIR}/${source}
        )
        target_sources(${target} PRIVATE ${source}.${arg_FORMAT})
    endforeach ()
endfunction()

compile_shader(verdigris
    ENV vulkan1.2
    SPV spv1.6
    FORMAT bin
    INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/gfx/vulkan/shaders/include"
    SOURCES
    src/gfx/vulkan/shaders/flat_pipeline.vert
    src/gfx/vulkan/shaders/flat_pipeline.frag
    src/gfx/vulkan/shaders/voxel.vert
    src/gfx/vulkan/shaders/voxel.frag

    src/gfx/vulkan/shaders/voxel/uber_voxel.comp
)
