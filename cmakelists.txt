cmake_minimum_required(VERSION 3.28)
project(verdigris VERSION 0.0.0.1)

include(FetchContent)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# https://bugs.llvm.org/show_bug.cgi?id=47950
set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded)

# Libraries

FetchContent_Declare(fmt
    GIT_REPOSITORY https://github.com/fmtlib/fmt.git
    GIT_TAG master
    GIT_SHALLOW TRUE
)
FetchContent_MakeAvailable(fmt)

FetchContent_Declare(concurrentqueue
    GIT_REPOSITORY https://github.com/cameron314/concurrentqueue
    GIT_TAG master
    GIT_SHALLOW TRUE
)
FetchContent_MakeAvailable(concurrentqueue)

FetchContent_Declare(glfw
        GIT_REPOSITORY https://github.com/glfw/glfw
        GIT_TAG master
        GIT_SHALLOW TRUE
        )
FetchContent_MakeAvailable(glfw)

FetchContent_Declare(gcem
        GIT_REPOSITORY https://github.com/kthohr/gcem
        GIT_TAG master
        GIT_SHALLOW TRUE
        )
FetchContent_MakeAvailable(gcem)

find_package(Vulkan REQUIRED)


# Executable

add_executable(verdigris
    src/main.cpp

    src/gfx/vulkan/device.cpp
    src/gfx/vulkan/instance.cpp

    src/gfx/renderer.cpp
    src/gfx/window.cpp

    src/util/log.cpp
    src/util/misc.cpp
)
target_link_libraries(verdigris PUBLIC fmt::fmt concurrentqueue glfw gcem)

target_include_directories(verdigris PUBLIC ${CMAKE_SOURCE_DIR}/src ${Vulkan_INCLUDE_DIRS})

# Compile definitions

target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_MINOR=${PROJECT_VERSION_MINOR})
target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_PATCH=${PROJECT_VERSION_PATCH})
target_compile_definitions(verdigris PUBLIC VERDIGRIS_VERSION_TWEAK=${PROJECT_VERSION_TWEAK})

target_compile_definitions(verdigris PUBLIC VULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)
target_compile_definitions(verdigris PUBLIC VULKAN_HPP_NO_CONSTRUCTORS=1)

if (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    target_compile_definitions(verdigris PUBLIC VERDIGRIS_ENABLE_VALIDATION=1)
else()
    target_compile_definitions(verdigris PUBLIC VERDIGRIS_ENABLE_VALIDATION=0)
endif()




# Compiler flags

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    if (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
        # Clang
        target_compile_options(verdigris PUBLIC -march=native)
        target_compile_options(verdigris PUBLIC -fvisibility=default)

        if (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
            # Add debug symbols that lldb can actually read
            target_compile_options(verdigris PUBLIC -glldb)
            target_compile_options(verdigris PUBLIC -gdwarf-4)
            target_compile_options(verdigris PUBLIC -g3)
            # target_compile_options(verdigris PUBLIC -fprofile-instr-generate -fcoverage-mapping)

        #     target_compile_options(verdigris PUBLIC -fsanitize=address)
        #     target_link_options(verdigris PUBLIC -fsanitize=address)

        #     target_compile_options(verdigris PUBLIC -fsanitize=undefined)
        #     target_link_options(verdigris PUBLIC -fsanitize=undefined)

            # target_compile_options(verdigris PUBLIC -fsanitize=memory)
            # target_link_options(verdigris PUBLIC -fsanitize=memory)

            # target_compile_options(verdigris PUBLIC -fsanitize=leak)
            # target_link_options(verdigris PUBLIC -fsanitize=leak)

            # target_compile_options(verdigris PUBLIC -fsanitize=thread)
            # target_link_options(verdigris PUBLIC -fsanitize=thread)
        endif ()

        target_compile_options(verdigris PUBLIC -Wno-c++98-compat)
        target_compile_options(verdigris PUBLIC -Wno-c++98-compat-pedantic)
        target_compile_options(verdigris PUBLIC -Wno-missing-prototypes)
        target_compile_options(verdigris PUBLIC -Wno-reserved-macro-identifier)
        target_compile_options(verdigris PUBLIC -Wno-pre-c++20-compat)
        target_compile_options(verdigris PUBLIC -Wno-braced-scalar-init)
        target_compile_options(verdigris PUBLIC -Wno-old-style-cast)
        target_compile_options(verdigris PUBLIC -Wno-c++20-compat)
        target_compile_options(verdigris PUBLIC -Wno-padded)
        target_compile_options(verdigris PUBLIC -Wno-unknown-attributes)
        target_compile_options(verdigris PUBLIC -Wno-documentation-unknown-command)
        target_compile_options(verdigris PUBLIC -Wno-exit-time-destructors)

        # Windows edge case with the address sanitizer
        # https://github.com/llvm/llvm-project/issues/56300
        if (WIN32)
            target_compile_definitions(verdigris PUBLIC _ITERATOR_DEBUG_LEVEL=0)
            target_compile_definitions(verdigris PUBLIC _DISABLE_STRING_ANNOTATION)
            target_compile_definitions(verdigris PUBLIC _DISABLE_VECTOR_ANNOTATION)
        endif ()

        # https://clang.llvm.org/docs/UsersManual.html#controlling-code-generation

    else ()
        # Clang-cl
        message(FATAL_ERROR "Clang-cl support has not been added")
    endif ()

elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(verdigris PUBLIC -march=native)
    target_compile_options(verdigris PUBLIC -fvisibility=default)

    target_compile_options(verdigris PUBLIC -Wno-stringop-overflow)

    # if (NOT WIN32)
    #   target_compile_options(verdigris PUBLIC -fsanitize=address)
    #   target_link_options(verdigris  PUBLIC -fsanitize=address)
    # endif()

elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    message(FATAL_ERROR "MSVC support has not been added")
else ()
    message(FATAL_ERROR "Unknown and Unsupported compiler")
endif ()

