#version 460

#extension GL_EXT_scalar_block_layout : require

#include <../include/voxel.glsl>
#include <../include/ray.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba8_snorm) writeonly uniform image2D out_image;
layout(set = 0, binding = 1, std430) readonly uniform WorldInfo
{
    mat4 inv_model_view_proj;
    mat4 model_view_proj;

    vec3 camera_position;
    float _pad0;

    vec3 sphere_center;
    float _pad1;

    float sphere_radius;
} in_world_info;

const vec4 RayMissColor = vec4(0.0, 0.0, 0.0, 0.0);
const vec3 WorldUpVector = vec3(0.0, 1.0, 0.0);

void propagateIntersection(in Ray ray, in Sphere sphere, inout IntersectionResult out_result)
{
    IntersectionResult result = Sphere_tryIntersect(sphere, ray);

    if (!out_result.intersection_occured ||
        (result.intersection_occured && 
        result.maybe_distance < out_result.maybe_distance))
    {
        out_result = result;
    } 
}

void propagateIntersection(in Ray ray, in Cube cube, inout IntersectionResult out_result)
{
    IntersectionResult result = Cube_tryIntersect(cube, ray);

    if (!out_result.intersection_occured ||
        (result.intersection_occured && 
        result.maybe_distance < out_result.maybe_distance))
    {
        out_result = result;
    } 
}

vec4 calculatePixelColor(in Ray ray)
{
    IntersectionResult bestIntersection;
    bestIntersection.intersection_occured = false;

    {
        Sphere sphere;
        sphere.center = in_world_info.sphere_center;
        sphere.radius = in_world_info.sphere_radius;

        propagateIntersection(ray, sphere, bestIntersection);
    }
    
    {
        Cube cube;
        cube.center = in_world_info.sphere_center + 10.0;
        cube.edge_length = in_world_info.sphere_radius;

        IntersectionResult result = Cube_tryIntersect(cube, ray);

        propagateIntersection(ray, cube, bestIntersection);
    }

    {
        Cube cube;
        cube.center = in_world_info.sphere_center;
        cube.edge_length = in_world_info.sphere_radius * 2;
        
        IntersectionResult result = Cube_tryIntersect(cube, ray);

        propagateIntersection(ray, cube, bestIntersection);
    }

    if (bestIntersection.intersection_occured)
    {
        return vec4(bestIntersection.maybe_normal * 0.5 + 0.5, 1.0); // Color based on the surface normal
        // return vec4(0.0, bestIntersection.maybe_distance / 100.0, 0.0, 1.0); // Color based on the surface normal
    
    }
    else
    {
        return RayMissColor;
    }
}

void main()
{
    const ivec2 this_pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    const ivec2 image_size = imageSize(out_image);
    const float aspect_ratio = float(image_size.x) / float(image_size.y);

    const vec2 this_normalized_coord = (vec2(this_pixel_coords) / vec2(image_size)) * 2.0 - 1.0;

    vec4 near_clip_position = vec4(this_normalized_coord, 0.1, 1.0);

    vec4 intercalc_world_space_position = in_world_info.inv_model_view_proj * near_clip_position;

    vec3 world_space_clip_position = intercalc_world_space_position.xyz / intercalc_world_space_position.w;

    Ray ray;
    ray.origin = in_world_info.camera_position;
    ray.direction = -normalize(world_space_clip_position- in_world_info.camera_position); // 

    imageStore(
        out_image,
        this_pixel_coords,
        calculatePixelColor(ray)
    );
}
