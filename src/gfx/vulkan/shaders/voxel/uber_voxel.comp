#version 460
#extension GL_EXT_scalar_block_layout : require

#include <intersectables/cube.glsl>
#include <intersectables/sphere.glsl>
#include <intersectables/voxel_brick_def.glsl>
#include <ray.glsl>
#include <voxel.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba8_snorm) writeonly
    restrict uniform image2D out_image;
layout(set = 0, binding = 1, std430) readonly restrict uniform WorldInfo
{
    mat4 inv_model_view_proj;
    mat4 model_view_proj;

    vec3  camera_position;
    float _pad0;

    vec3  sphere_center;
    float _pad1;

    float sphere_radius;
}
in_world_info;
layout(set = 0, binding = 2, std430) readonly restrict buffer Voxels
{
    VoxelBrick[] bricks;
}
in_voxels;

#define VOXEL_BRICK_IMPL_ARRAY in_voxels.bricks

#include <intersectables/voxel_brick_impl.glsl>

#undef VOXEL_BRICK_IMPL_ARRAY

vec4 calculatePixelColor(const Ray ray);
Ray  generateRay(const ivec2 pixelXY);

void main()
{
    const ivec2 pixelXY = ivec2(gl_GlobalInvocationID.xy);

    imageStore(out_image, pixelXY, calculatePixelColor(generateRay(pixelXY)));
}

vec4 calculatePixelColor(const Ray ray)
{
    IntersectionResult bestIntersection;
    bestIntersection.intersection_occurred = false;

    propagateIntersection(bestIntersection, VoxelBrick_tryIntersect(0, ray));

    {
        Cube cube;
        cube.center      = in_world_info.sphere_center;
        cube.edge_length = in_world_info.sphere_radius;

        propagateIntersection(bestIntersection, Cube_tryIntersect(cube, ray));
    }

    {
        Sphere sphere;
        sphere.center = in_world_info.sphere_center + vec3(0, 10.0, 0);
        sphere.radius = in_world_info.sphere_radius;

        propagateIntersection(
            bestIntersection, Sphere_tryIntersect(sphere, ray));
    }

    if (bestIntersection.intersection_occurred)
    {
        return vec4(bestIntersection.maybe_normal / 2 + 0.5, 1.0);
    }
    else
    {
        const vec4 RayMissColor = vec4(0.0, 0.0, 0.0, 0.0);
        return RayMissColor;
    }
}

Ray generateRay(const ivec2 pixelXY)
{
    const ivec2 outImageSize = imageSize(out_image);

    const vec2 interPixelDelta = vec2(1.0, 1.0) / vec2(outImageSize);
    //                             - /* for clarity */
    //                              vec2(0.0, 0.0) / vec2(outImageSize);

    const vec2 normalizedPixelXY = (vec2(pixelXY) / vec2(outImageSize)) * 2.0
                                 - 1.0 + (interPixelDelta / 2);

    // NOTE: these are hardcoded into camera.cpp, do not change
    const float nearPlaneDistance = 0.1;
    const float farPlaneDistance  = 100000.0;

    const vec4 nearScreenSpace =
        vec4(normalizedPixelXY, nearPlaneDistance, 1.0);
    const vec4 farScreenSpace = vec4(normalizedPixelXY, farPlaneDistance, 1.0);

    vec4 nearPoint = in_world_info.inv_model_view_proj * nearScreenSpace;
    nearPoint /= nearPoint.w;

    vec4 farPoint = in_world_info.inv_model_view_proj * farScreenSpace;
    farPoint /= farPoint.w;

    Ray ray;
    ray.origin    = in_world_info.camera_position;
    // we invert the ray's direction as a result of how screenspace coordinates
    // work in vulkan.
    // we want the screenspace cordinate -1 -1 to actually be pointed in the
    // (+, +, +) octant, so negating this value accomplishes this.
    // This is a nice sideeffect of the coordinate system chosen
    ray.direction = -normalize(farPoint.xyz - nearPoint.xyz);

    return ray;
}